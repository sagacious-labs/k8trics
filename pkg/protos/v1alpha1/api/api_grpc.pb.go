// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HyperionAPIServiceClient is the client API for HyperionAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HyperionAPIServiceClient interface {
	// Apply RPC will take in a apply request which can result in a creation
	// of a hyperion module or updation of the module config
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error)
	// Delete RPC will take in a delete request which accepts the version, name and namespace
	// of a module and will delete the module
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// List RPC will take a list request which can EITHER specify a label based selectors
	// OR can specify core module data like name, version, namespace etc. and will list the modules
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (HyperionAPIService_ListClient, error)
	// Get RPC will take in a get request which will return the info of the module
	// specified in the request
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// WatchData RPC will will take a list request which can EITHER specify a label based selectors
	// OR can specify core module data like name, version, namespace etc. and will get data for the
	// modules that match the filters
	WatchData(ctx context.Context, in *WatchDataRequest, opts ...grpc.CallOption) (HyperionAPIService_WatchDataClient, error)
	// WatchData RPC will will take a list request which can EITHER specify a label based selectors
	// OR can specify core module data like name, version, namespace etc. and will get data for the
	// modules that match the filters
	WatchLog(ctx context.Context, in *WatchLogRequest, opts ...grpc.CallOption) (HyperionAPIService_WatchLogClient, error)
}

type hyperionAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHyperionAPIServiceClient(cc grpc.ClientConnInterface) HyperionAPIServiceClient {
	return &hyperionAPIServiceClient{cc}
}

func (c *hyperionAPIServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*ApplyResponse, error) {
	out := new(ApplyResponse)
	err := c.cc.Invoke(ctx, "/hyperion.v1alpha1.api.HyperionAPIService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperionAPIServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/hyperion.v1alpha1.api.HyperionAPIService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperionAPIServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (HyperionAPIService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &HyperionAPIService_ServiceDesc.Streams[0], "/hyperion.v1alpha1.api.HyperionAPIService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &hyperionAPIServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HyperionAPIService_ListClient interface {
	Recv() (*GetResponse, error)
	grpc.ClientStream
}

type hyperionAPIServiceListClient struct {
	grpc.ClientStream
}

func (x *hyperionAPIServiceListClient) Recv() (*GetResponse, error) {
	m := new(GetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hyperionAPIServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/hyperion.v1alpha1.api.HyperionAPIService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperionAPIServiceClient) WatchData(ctx context.Context, in *WatchDataRequest, opts ...grpc.CallOption) (HyperionAPIService_WatchDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &HyperionAPIService_ServiceDesc.Streams[1], "/hyperion.v1alpha1.api.HyperionAPIService/WatchData", opts...)
	if err != nil {
		return nil, err
	}
	x := &hyperionAPIServiceWatchDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HyperionAPIService_WatchDataClient interface {
	Recv() (*WatchDataResponse, error)
	grpc.ClientStream
}

type hyperionAPIServiceWatchDataClient struct {
	grpc.ClientStream
}

func (x *hyperionAPIServiceWatchDataClient) Recv() (*WatchDataResponse, error) {
	m := new(WatchDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hyperionAPIServiceClient) WatchLog(ctx context.Context, in *WatchLogRequest, opts ...grpc.CallOption) (HyperionAPIService_WatchLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &HyperionAPIService_ServiceDesc.Streams[2], "/hyperion.v1alpha1.api.HyperionAPIService/WatchLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &hyperionAPIServiceWatchLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HyperionAPIService_WatchLogClient interface {
	Recv() (*WatchLogResponse, error)
	grpc.ClientStream
}

type hyperionAPIServiceWatchLogClient struct {
	grpc.ClientStream
}

func (x *hyperionAPIServiceWatchLogClient) Recv() (*WatchLogResponse, error) {
	m := new(WatchLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HyperionAPIServiceServer is the server API for HyperionAPIService service.
// All implementations must embed UnimplementedHyperionAPIServiceServer
// for forward compatibility
type HyperionAPIServiceServer interface {
	// Apply RPC will take in a apply request which can result in a creation
	// of a hyperion module or updation of the module config
	Apply(context.Context, *ApplyRequest) (*ApplyResponse, error)
	// Delete RPC will take in a delete request which accepts the version, name and namespace
	// of a module and will delete the module
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// List RPC will take a list request which can EITHER specify a label based selectors
	// OR can specify core module data like name, version, namespace etc. and will list the modules
	List(*ListRequest, HyperionAPIService_ListServer) error
	// Get RPC will take in a get request which will return the info of the module
	// specified in the request
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// WatchData RPC will will take a list request which can EITHER specify a label based selectors
	// OR can specify core module data like name, version, namespace etc. and will get data for the
	// modules that match the filters
	WatchData(*WatchDataRequest, HyperionAPIService_WatchDataServer) error
	// WatchData RPC will will take a list request which can EITHER specify a label based selectors
	// OR can specify core module data like name, version, namespace etc. and will get data for the
	// modules that match the filters
	WatchLog(*WatchLogRequest, HyperionAPIService_WatchLogServer) error
	mustEmbedUnimplementedHyperionAPIServiceServer()
}

// UnimplementedHyperionAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHyperionAPIServiceServer struct {
}

func (UnimplementedHyperionAPIServiceServer) Apply(context.Context, *ApplyRequest) (*ApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedHyperionAPIServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedHyperionAPIServiceServer) List(*ListRequest, HyperionAPIService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedHyperionAPIServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHyperionAPIServiceServer) WatchData(*WatchDataRequest, HyperionAPIService_WatchDataServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchData not implemented")
}
func (UnimplementedHyperionAPIServiceServer) WatchLog(*WatchLogRequest, HyperionAPIService_WatchLogServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLog not implemented")
}
func (UnimplementedHyperionAPIServiceServer) mustEmbedUnimplementedHyperionAPIServiceServer() {}

// UnsafeHyperionAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HyperionAPIServiceServer will
// result in compilation errors.
type UnsafeHyperionAPIServiceServer interface {
	mustEmbedUnimplementedHyperionAPIServiceServer()
}

func RegisterHyperionAPIServiceServer(s grpc.ServiceRegistrar, srv HyperionAPIServiceServer) {
	s.RegisterService(&HyperionAPIService_ServiceDesc, srv)
}

func _HyperionAPIService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperionAPIServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperion.v1alpha1.api.HyperionAPIService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperionAPIServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperionAPIService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperionAPIServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperion.v1alpha1.api.HyperionAPIService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperionAPIServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperionAPIService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HyperionAPIServiceServer).List(m, &hyperionAPIServiceListServer{stream})
}

type HyperionAPIService_ListServer interface {
	Send(*GetResponse) error
	grpc.ServerStream
}

type hyperionAPIServiceListServer struct {
	grpc.ServerStream
}

func (x *hyperionAPIServiceListServer) Send(m *GetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HyperionAPIService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperionAPIServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hyperion.v1alpha1.api.HyperionAPIService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperionAPIServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HyperionAPIService_WatchData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HyperionAPIServiceServer).WatchData(m, &hyperionAPIServiceWatchDataServer{stream})
}

type HyperionAPIService_WatchDataServer interface {
	Send(*WatchDataResponse) error
	grpc.ServerStream
}

type hyperionAPIServiceWatchDataServer struct {
	grpc.ServerStream
}

func (x *hyperionAPIServiceWatchDataServer) Send(m *WatchDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HyperionAPIService_WatchLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HyperionAPIServiceServer).WatchLog(m, &hyperionAPIServiceWatchLogServer{stream})
}

type HyperionAPIService_WatchLogServer interface {
	Send(*WatchLogResponse) error
	grpc.ServerStream
}

type hyperionAPIServiceWatchLogServer struct {
	grpc.ServerStream
}

func (x *hyperionAPIServiceWatchLogServer) Send(m *WatchLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HyperionAPIService_ServiceDesc is the grpc.ServiceDesc for HyperionAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HyperionAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hyperion.v1alpha1.api.HyperionAPIService",
	HandlerType: (*HyperionAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _HyperionAPIService_Apply_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _HyperionAPIService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HyperionAPIService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _HyperionAPIService_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchData",
			Handler:       _HyperionAPIService_WatchData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchLog",
			Handler:       _HyperionAPIService_WatchLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1alpha1/api/api.proto",
}
